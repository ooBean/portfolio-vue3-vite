{
  "navigation": {
    "home": "首页",
    "portfolio": "作品集",
    "about": "关于我",
    "contact": "联系我"
  },
  "footer": {
    "copyright": "© {year} {name}. 版权所有."
  },
  "home": {
    "greeting": "你好，我是{name}，一名前端开发者",
    "job": "前端开发者",
    "welcome": "欢迎来到我的作品集网站。",
    "view_projects": "查看我的项目",
    "user_name_placeholder": "Bean",
    "user_location_placeholder": "中国大陆",
    "greeting_new_style": {
      "line1": "你好，我是",
      "line2": "{name}"
    },
    "description_new_style": "我是一名前端开发者，现居{location}。",
    "lines": [
      [
        {
          "text": "我是",
          "highlight": true
        },
        {
          "text": "一名前端开发程序员"
        },
        {
          "text": "，我希望获得一份远程的"
        },
        {
          "text": "前端兼职或全职"
        },
        {
          "text": "的前端开发工作，"
        }
      ],
      [
        {
          "text": "这是我觉得可以"
        },
        {
          "text": "平衡生活和工作",
          "highlight": true
        },
        {
          "text": "的方式，"
        }
      ],
      [
        {
          "text": "请选择我"
        }
      ]
    ]
  },
  "portfolio": {
    "title": "我的作品集",
    "description": "这里将展示我的项目列表。",
    "loading": "加载中...",
    "load_error": "加载作品失败: {error}",
    "project_placeholder": "项目 {number}",
    "gallery": {
      "title": "相册",
      "description": "这是一个简单的相册，用来展示我的照片。"
    },
    "todolist": {
      "input_placeholder": "请输入待办事项",
      "title": "待办事项",
      "description": "这是一个简单、直观且高效的待办事项列表应用。",
      "subtitle": "一次完成一项代办。",
      "empty_list": "你的待办列表是空的。",
      "add_item_label": "添加到待办列表",
      "add_item_button": "添加代办",
      "mark_as_done": "完成",
      "mark_as_undone": "未完成",
      "all": "全部",
      "delete": "删除",
      "sort_toggle": "将已完成任务移到末尾？",
      "items": {
        "learn_vue": "学习 Vue.js",
        "code_todolist": "编写一个待办事项列表",
        "learn_more": "学习其他内容"
      }
    },
    "hover_effects": {
      "title": "悬停效果",
      "description": "鼠标悬停时的交互效果"
    },
    "chat": {
      "title": "实时聊天",
      "subtitle": "使用WebSocket的简易聊天应用",
      "empty": "暂无消息，开始聊天吧！",
      "description": "这是一个使用假消息模拟对话的演示聊天界面。",
      "input_placeholder": "输入消息...",
      "send_button": "发送",
      "default_username": "访客",
      "status": {
        "connected": "已连接",
        "connecting": "连接中...",
        "disconnected": "已断开连接",
        "error": "连接错误",
        "typing": "正在输入...",
        "waiting": "正在等待回复..."
      },
      "demo_messages": {
        "welcome": "欢迎来到聊天室！",
        "greeting": "大家好！",
        "question": "今天过得怎么样？",
        "reply": "谢谢你的消息！这是一个演示聊天界面。"
      }
    },
    "theme_switcher": {
      "label": "选择主题",
      "light": "浅色",
      "dark": "深色",
      "warm": "暖色",
      "light_title": "切换到浅色主题",
      "dark_title": "切换到深色主题",
      "warm_title": "切换到暖色主题"
    },
    "interactive_card": {
      "title": "3D 交互卡片",
      "description": "一个基于鼠标悬停的3D倾斜卡片，展示了CSS Transform和透视效果的应用。",
      "subtitle": "一探方圆",
      "author_prefix": "组件作者：",
      "inspiration_prefix": "灵感来源：",
      "inspiration_link_text": "原作 by Ariona, Rian"
    },
    "design_system": {
      "title": "设计规范",
      "description": "本作品集的“活”设计文档，展示了颜色、字体、间距和可复用组件的统一规范。",
      "philosophy": "以一致性、可复用性和可访问性为核心原则，构建美观且易于维护的用户界面。",
      "tokens_title": "设计令牌",
      "colors_title": "色彩",
      "typography_title": "字体",
      "components_title": "组件展示"
    }
  },
  "about": {
    "title": "关于我",
    "intro_1": "你好！我是一名热衷于构建美观、易用且高效 Web 应用的前端开发者。",
    "intro_2": "我擅长使用 Vue.js (Vue 2 和 Vue 3) 进行开发，并且对 JavaScript、HTML5 和 CSS3 有着扎实的掌握。",
    "intro_3": "我喜欢探索新技术，追求代码的优雅与性能的极致。我相信良好的用户体验是衡量一个产品成功与否的关键标准之一。",
    "skills_title": "我的技能栈",
    "skills": {
      "frameworks": "前端框架",
      "core_tech": "核心技术",
      "css_tools": "CSS 工具",
      "build_tools": "构建工具",
      "version_control": "版本控制",
      "api_interaction": "API 交互",
      "testing": "测试 (可选)",
      "others": "其他"
    },
    "experience_title": "项目经验/学习经历",
    "experience_placeholder": "(这里可以简述你的主要项目经验或重要的学习经历，突出你在项目中扮演的角色和取得的成果。)",
    "project_a_description": "项目A: 负责XX模块开发，使用Vue 3和Pinia，实现了XX功能，提升了XX性能...",
    "project_b_description": "项目B: 参与XX系统的前端重构，从Vue 2迁移到Vue 3，优化了XX...",
    "philosophy_title": "我的开发理念",
    "philosophy_text": "我坚信代码不仅要能工作，更要易于理解和维护。我追求编写简洁、模块化且文档清晰的代码。同时，我非常注重用户体验和界面性能，力求为用户带来流畅和愉悦的交互感受。"
  },
  "contact": {
    "title": "联系我",
    "intro": "你可以通过以下方式联系我，或者填写下方的表单。",
    "email_label": "邮箱:",
    "github_label": "GitHub:ooPeachBoy",
    "linkedin_label": "LinkedIn:ooPeachBoy",
    "form": {
      "name": "姓名:",
      "email": "邮箱:",
      "message": "内容:",
      "send": "发送消息",
      "sending": "发送中...",
      "success": "感谢您的留言，我会尽快回复！",
      "error": "抱歉，消息发送失败，请稍后再试。"
    }
  },
  "common": {
    "back_to_portfolio": "返回作品集",
    "tech_highlights": {
      "trigger": "技术亮点",
      "header": "技术实现亮点"
    }
  },
  "tech_highlights": {
    "todo": {
      "title1": "响应式状态与持久化",
      "p1": "组件的核心数据 (<code>todo</code> 列表) 通过 Vue 3 的 <code>ref</code> 进行管理。利用 <code>watch</code> 侦听器并设置 <code>{ deep: true }</code>，实现了对数组内部变化的深度监听。任何变更都会被自动序列化并同步至 <code>sessionStorage</code>，从而实现了跨页面刷新的状态持久化。在组件挂载时 (<code>onMounted</code>)，会优先从 <code>sessionStorage</code> 恢复数据。",
      "title2": "声明式的数据计算",
      "p2": "待办事项的筛选和排序功能是通过一个 <code>computed</code> 属性 (<code>filteredTodo</code>) 实现的。该属性根据当前的筛选状态 (<code>sortByStatus</code>) 从原始的 <code>todo</code> 数组中派生出新的视图数据。这种声明式的方式避免了手动操作DOM，确保了数据源的唯一性和UI的同步性，代码逻辑清晰且易于维护。",
      "title3": "列表过渡与交互优化",
      "p3": "通过集成 Vue 的内置 <code>&lt;transition-group&gt;</code> 组件，为列表项的添加、删除和排序提供了平滑的动画过渡效果，提升了用户操作的视觉反馈。此外，输入框使用了自定义指令 <code>v-focus</code>，在组件加载后自动获取焦点，优化了用户的输入体验。"
    },
    "designsystem": {
      "title1": "响应式布局",
      "p1": "本页面采用 <code>position: absolute</code> 实现桌面端垂直居中。通过一系列精细的媒体查询调整 <code>transform: translateY()</code>，确保内容容器在不同设备尺寸下与顶栏保持合适距离，避免重叠。",
      "title2": "响应式表格",
      "p2": "为解决小屏幕下的显示问题，表格外层容器设置了 <code>overflow-x: auto</code>，使表格在其内部可水平滚动，同时保持整体布局不变。",
      "title3": "就地编辑",
      "p3": "表格的就地编辑功能通过 Vue 的条件渲染指令 (<code>v-if</code> / <code>v-else</code>) 在文本与输入框间切换。当前编辑行索引由 ref 状态管理。"
    },
    "chat": {
      "title1": "模拟异步交互",
      "p1": "为了提升用户体验的真实感，组件通过 <code>setTimeout</code> 结合随机延迟，模拟了异步消息流与“对方正在输入”的加载指示器。这种非阻塞式的交互设计，旨在还原真实聊天场景，增强用户沉浸感。",
      "title2": "高级状态与 DOM 管理",
      "p2": "组件采用混合状态管理策略：使用 Pinia (<code>useUiStore</code>) 管理全局 UI 状态（如主题），同时利用 Vue 3 组合式 API (<code>ref</code>) 管理组件内部的响应式数据。结合模板引用与 <code>onMounted</code> 钩子，实现聊天记录自动滚动和输入框自动聚焦等精准 DOM 操作。",
      "title3": "动态与多语言 UI",
      "p3": "该聊天界面完全国际化 (i18n)。通过集成 <code>vue-i18n</code>，并根据用户 <code>locale</code> 从映射表 (<code>messagesMap</code>) 中动态选择对话文本，实现多语言无缝切换。CSS 变量使 UI 样式灵活适配不同主题。"
    },
    "gallery": {
      "title1": "滚动加载与请求节流",
      "p1": "组件通过监听容器的滚动事件，并在滚动至距底部特定阈值时触发 <code>loadMore</code> 函数，实现按需加载数据。为了防止短时间内并发请求，使用 <code>loading</code> 状态作为请求锁，这是一种轻量级请求节流机制。这种策略确保流畅体验并避免不必要的 API 调用。",
      "title2": "混合状态管理与持久化",
      "p2": "该组件采用 Pinia 与组件局部状态 (<code>ref</code>) 相结合的混合策略。Pinia Store 用于跨会话缓存图片数据，避免不必要的网络请求；加载状态等临时 UI 状态由组件内部管理，实现清晰的状态分层。",
      "title3": "纯CSS响应式瀑布流",
      "p3": "图片画廊使用纯 CSS 的 <code>column-count</code> 属性构建响应式瀑布流布局。同时，组件通过 <code>onMounted</code> 和 <code>onUnmounted</code> 钩子安全绑定和解绑滚动事件监听器，确保组件健壮且无内存泄漏。"
    },
    "imagehovereffects": {
      "title1": "CSS驱动的声明式动画",
      "p1": "所有悬停效果均通过纯CSS实现，未使用任何JavaScript。动画大量运用了 <code>transform</code> (2D/3D)、<code>transition</code>、<code>filter</code> 以及伪元素 (<code>::before</code>/<code>::after</code>)，充分利用GPU加速，以确保动画的流畅性。这种声明式的实现方式，使得代码直观且易于维护。",
      "title2": "模块化与数据驱动设计",
      "p2": "组件通过 <code>v-for</code> 指令循环渲染数据对象数组。每种悬停效果封装为独立CSS类，并通过数据绑定 (<code>:class=\"card.effect\"</code>) 应用到卡片上。这种模式使效果与组件逻辑解耦，添加或修改效果仅需增删CSS类和数据项，扩展性强。",
      "title3": "现代响应式布局与国际化",
      "p3": "卡片画廊采用 CSS Grid 结合 <code>auto-fit</code> 和 <code>minmax()</code> 构建响应式网格，无需额外媒体查询。所有文本内容通过 <code>vue-i18n</code> 与 <code>computed</code> 属性国际化，根据用户语言环境动态展示。"
    },
    "interactivecard": {
      "title1": "数据驱动的 3D 变换",
      "p1": "卡片的交互效果由 Vue 的组合式 API 驱动。通过监听 <code>@mousemove</code> 事件来实时计算鼠标相对于卡片中心的位置，并将计算出的旋转角度存储在一个 <code>reactive</code> 状态对象中。一个 <code>computed</code> 属性负责将这些状态值声明式地转换为 CSS <code>transform</code> 字符串，实现数据到视图的单向绑定。",
      "title2": "CSS 3D 空间与性能优化",
      "p2": "视觉上的立体感是通过在父容器上应用 <code>perspective</code> 属性来创建 3D 空间实现的。卡片本身启用 <code>transform-style: preserve-3d</code>，并利用 <code>translateZ</code> 在 Z 轴上位移内部元素，从而构建视觉深度。同时，通过添加 <code>will-change: transform</code> 属性，提示浏览器该元素即将发生变换，以申请潜在的渲染优化。",
      "title3": "情境感知的组件设计",
      "p3": "组件设计了 <code>previewMode</code> 属性。该属性为 true 时，通过 <code>transform: scale()</code> 等比缩放并禁用 <code>pointer-events</code>，防止预览场景下的交互冲突。此设计展示了组件在不同使用情境下的适应性与可复用性。"
    },
    "index": {
      "title1": "声明式项目网格渲染",
      "p1": "通过集中维护项目元数据（如 ID、组件、路由及翻译键），借助计算属性和 vue-i18n 动态注入国际化文本，实现了 PreviewCard 组件的纯声明式网格渲染，无需手动操作 DOM。",
      "title2": "按需组件加载与路由切换",
      "p2": "项目映射配置内置组件与路由名称，依赖 Vue Router 的路由导航自动切换视图，并通过动态导入实现按需加载，保持页面结构高内聚、低耦合。",
      "title3": "统一主题与预览模式管理",
      "p3": "整合 ThemeSwitcher 与 Pinia 管理全局主题，挂载时优先从会话存储或系统偏好恢复，并通过条件样式支持预览模式与常规视图的无缝切换，确保风格一致性。"
    }
  }
}